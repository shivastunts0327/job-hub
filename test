node{
    
    stage('cloning the private git hub code'){
    sh label: '', script: '''sudo chmod 777 /opt
    cd /opt
    # sudo git clone git@github.com:shivastunts0327/job-hub.git
    sudo chmod 777 /opt/job-hub'''
    }

    stage('permissions for Directories'){
    sh label: '', script: '''# sudo sudo mkdir /opt/Mydockerfile
    sudo chmod 777 /opt/Mydockerfile
    # sudo cp -r /opt/job-hub /opt/Mydockerfile'''
    }

stage('docker installation'){
    sh label: '', script: '''sudo apt update -y
sudo apt upgrade -y
echo Y | sudo apt-get install curl apt-transport-https ca-certificates software-properties-common
echo Y | curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
echo Y | sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt update -y
echo Y | sudo apt-cache policy docker-ce 
echo Y | sudo apt install docker-ce'''
}

stage('docker file'){
    sh label: '', script: '''cat >/opt/Dockerfile <<'EOF'
FROM ubuntu
COPY ./job-hub /
RUN apt-get update -y
RUN apt-get upgrade -y
RUN apt-get install git -y
RUN apt-get install sudo -y
RUN sudo apt -y install curl dirmngr apt-transport-https lsb-release ca-certificates
RUN sudo curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
RUN sudo apt -y install nodejs
RUN sudo apt -y  install gcc g++ make
RUN npm install
WORKDIR /
ENTRYPOINT ["npm", "run", "dev-server"]'''
}
stage('docker file moving to response directory'){
    sh label: '', script: '''
    # sudo mv /opt/Dockerfile /opt/Mydockerfile'''
    }

stage('docker build'){
    sh label: '', script: '''cd /opt/Mydockerfile
    # sudo docker build -t ihscarriers .
    sudo apt-get update -y'''
    }
    
    stage('docker hub login'){
    sh label: '', script: '''cat /tmp/passwd | docker login --username shivastunts --password-stdin'''
      }
       
       stage('docker image pushing to hub'){
    sh label: '', script: '''# sudo docker tag ihscarriers shivastunts/ihscarriers
    # sudo docker push shivastunts/ihscarriers'''
    }
 
    stage('code'){
    sh label: '', script: '''cat >/opt/code.sh <<'EOF'
    cd /opt/projectihscarriers/job-hub
    npm install'''
    }
       
stage('ansible installing'){
   sh label: '', script: '''echo this script done by shiva
   echo Installing software-properties-common packages, then add the java OpenJDK PPA repository.
   sudo apt install software-properties-common apt-transport-https -y
   sudo add-apt-repository ppa:openjdk-r/ppa -y
   Now installing the Java 8 using apt command.
   sudo apt install openjdk-8-jdk -y
   echo java version installed on the system.
   java -version
   echo updating and upgrading the version
   sudo apt-get update -y
   sudo apt-get upgrade -y
   echo Ansible PPA to your server
   sudo apt-add-repository ppa:ansible/ansible \' \'
   echo update the repository and install Ansible
   sudo apt-get update -y
   sudo apt-get install ansible -y
   echo Ansible version
   sudo ansible --version'''
   }

stage('ihs application start script'){   
     sh label: '', script: '''cd /opt
cat >ihscarriers.sh <<'EOF'
#!/bin/sh 
SERVICE_NAME=ihscarriers
PATH_TO_SH=/opt/ihs.sh
PID_PATH_NAME=/tmp/ihscarriers-pid 
case $1 in 
start)
       echo "Starting $SERVICE_NAME ..."
  if [ ! -f $PID_PATH_NAME ]; then 
       nohup sh $PATH_TO_SH /tmp 2>> /dev/null >>/dev/null &      
                   echo $! > $PID_PATH_NAME  
       echo "$SERVICE_NAME started ..."         
  else 
       echo "$SERVICE_NAME is already running ..."
  fi
;;
stop)
  if [ -f $PID_PATH_NAME ]; then
         PID=$(cat $PID_PATH_NAME);
         echo "$SERVICE_NAME stoping ..." 
         kill $PID;         
         echo "$SERVICE_NAME stopped ..." 
         rm $PID_PATH_NAME       
  else          
         echo "$SERVICE_NAME is not running ..."   
  fi    
;;    
restart)  
  if [ -f $PID_PATH_NAME ]; then 
      PID=$(cat $PID_PATH_NAME);    
      echo "$SERVICE_NAME stopping ..."; 
      kill $PID;           
      echo "$SERVICE_NAME stopped ...";  
      rm $PID_PATH_NAME     
      echo "$SERVICE_NAME starting ..."  
      nohup sh $PATH_TO_SH /tmp 2>> /dev/null >> /dev/null &            
      echo $! > $PID_PATH_NAME  
      echo "$SERVICE_NAME started ..."    
  else           
      echo "$SERVICE_NAME is not running ..."    
     fi     ;;
 esac'''
 }

stage('ihs application as a service start'){ 
sh label: '', script: '''cd /opt
cat >ihscarriers.service <<'EOF'
[Unit]
 Description = ihscarriers web application
 After network.target = ihscarriers.service
[Service]
 Type = forking
 Restart=always
 RestartSec=1
 SuccessExitStatus=143 
 ExecStart = /usr/local/bin/ihscarriers.sh start
 ExecStop = /usr/local/bin/ihscarriers.sh stop
 ExecReload = /usr/local/bin/ihscarriers.sh reload
[Install]
 WantedBy=multi-user.target'''
}

stage('changing the ansible hosts'){
sh label: '', script: '''sudo rm -Rf /etc/ansible/hosts
sudo echo "13.127.15.102" > /opt/hosts
sudo echo "15.207.108.183" >> /opt/hosts
sudo chmod 777 /etc/ansible
sudo mv /opt/hosts /etc/ansible'''
}

stage('creating yaml script'){
sh label: '', script: '''cd /opt/
sudo echo "---
-
  hosts: 13.127.15.102,15.207.108.183
  tasks:
    vars:
    ansible_python_interpreter: /usr/bin/python3
  tasks:  
    - debug: var=ansible_host
   
    -
       shell: sudo chmod 777 /opt
    -
       shell: sudo chmod 777 /usr/local/bin
    -
       shell: sudo echo "cd /opt/projectihscarriers/job-hub" > /opt/ihs.sh
    -
       shell: sudo echo "npm run dev-server" >> /opt/ihs.sh
    -
       shell: apt-get update -y
    -
       shell: apt-get upgrade -y
    -
       shell: apt-get install git -y
    -
       shell: sudo apt -y install curl dirmngr apt-transport-https lsb-release ca-certificates
    -
       shell: sudo curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -
    -
       shell: sudo apt -y install nodejs
    -
       shell: sudo apt -y  install gcc g++ make
    -
       shell: sudo mkdir /opt/projectihscarriers
    -
      copy:
        src:  /opt/job-hub
        dest: /opt/projectihscarriers
    -
      copy:
        src:  /opt/code.sh
        dest: /opt
    -
       shell: sh /opt/code.sh
    -
      copy:
        src:  /opt/ihscarriers.sh
        dest: /usr/local/bin
    -
       shell: sudo chmod +x /usr/local/bin/ihscarriers.sh
    -
      copy:
        src:  /opt/ihscarriers.service
        dest: /etc/systemd/system
    -
       shell: sudo systemctl daemon-reload
    -
       shell: sudo systemctl enable ihscarriers
    -
       shell: sudo systemctl start ihscarriers
    -
       shell: sudo systemctl restart ihscarriers
    -
       shell: sudo systemctl stop ihscarriers
    -
       shell: sudo systemctl start ihscarriers'' > /opt/ihscarriers.yaml'''
       
       }
 
     stage('executing ihscarriers playbook'){ 
     sh label: '', script: '''sudo ansible-playbook /opt/ihscarriers.yaml'''
     }

     stage('Removing Docker installation'){ 
sh label: '', script: '''sudo docker stop $(docker ps -a -q)
sudo docker rm -f $(docker ps -a -q)
sudo docker rmi -f $(docker images -a -q)
sudo apt purge -y docker-engine docker docker.io docker-ce docker-ce-cli
sudo apt-get autoremove -y --purge docker-engine docker docker.io docker-ce  
sudo rm -rf /var/lib/docker /etc/docker
sudo rm /etc/apparmor.d/docker
sudo groupdel docker
sudo rm -rf /var/run/docker.sock'''
}

stage('Removing ansible installation'){ 
sh label: '', script: '''echo Y | sudo apt-get remove ansible
echo Y | sudo apt-get autoremove ansible
echo Y | sudo apt-get purge ansible
echo Y | sudo apt-get autoremove --purge ansible'''
}

stage('Removing all relevant files'){ 
sh label: '', script: '''sudo rm -Rf /opt/ *'''
}


stage('conculsion'){ 
sh label: '', script: '''sudo echo congrulations You Have deployed The IHS-CARRIERS WEB APPLICATION..'''
}


}


